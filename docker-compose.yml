version: "3.18"

services:
  db:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: "postgres"

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - .:/docker-entrypoint-initdb.d

  redis:
    container_name: redis
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

  celery-worker:
    build:
      context: .
    container_name: celery-worker
    command: celery -A config worker -l info
#    healthcheck:
#      test: ["CMD", "executable"]
#      interval: 30s
#      timeout: 30s
#      retries: 3
#      start_period: 5s
    volumes:
      - .:/code
    links:
      - redis
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery-beat:
    build: .
    container_name: celery-beat
    command: celery -A config beat -l info -S django
    volumes:
      - .:/code
    depends_on:
      celery-worker:
        #condition: service_healthy
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_healthy


  nginx:
    image: nginx
    container_name: nginx
    build:
      context: .
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/sites-available/habits_tracker
      - ./static_volume:/code/static

  api:
    container_name: api
#    command: sh -c "python manage.py collectstatic --noinput &&
#             python manage.py migrate &&
#             python manage.py runserver 0.0.0.0:8000"
    build:
      context: .
    tty: false
    volumes:
      - .:/code
    restart: on-failure
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy